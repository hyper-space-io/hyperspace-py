# coding: utf-8
"""
    Vector Similarity Demo

    The test functionality and Query testing  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@hyper-space.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
from __future__ import absolute_import

from typing import Optional

import hyperspace.models
from hyperspace.api.hyperspace_api import HyperspaceApi
from hyperspace.api_client import *

# python 2 and python 3 compatibility library
from hyperspace.rest import ApiException

class HyperspaceClientApi(HyperspaceApi):
    """Generic API client for Swagger client library builds.

    Swagger generic API client. This client handles the client-
    server communication, and is invariant across implementations. Specifics of
    the methods and models for each application are generated from the Swagger
    templates.

    NOTE: This class is auto generated by the swagger code generator program.
    Ref: https://github.com/swagger-api/swagger-codegen
    Do not edit the class manually.

    :param configuration: .Configuration object for this client
    :param header_name: a header to pass when making calls to the API.
    :param header_value: a header value to pass when making calls to
        the API.
    :param cookie: a cookie to include in the header when making calls
        to the API
    """

    def __init__(self, host, username, password):
        self.configuration = hyperspace.configuration.Configuration()
        self.configuration.host = host
        self.username = username
        self.password = password
        api_client = hyperspace.api_client.ApiClient(configuration=self.configuration)
        super().__init__(api_client=api_client)
        body = {"username": username, "password": password}
        login_response = self.login(body)
        access_token = "Bearer " + login_response.token
        api_client = hyperspace.api_client.ApiClient(configuration=self.configuration, header_name='Authorization',
                                                     header_value=access_token)

        super().__init__(api_client=api_client)
        old_func_call_api = self.api_client.call_api

        def retry_jwt(*args, **kwargs):
            try:
                return old_func_call_api(*args, **kwargs)
            except ApiException as e:
                if "token expired" in str(e.body):
                    login_body = {"username": username, "password": password}
                    login_response = self.login(login_body)
                    access_token = "Bearer " + login_response.token
                    api_client.set_default_header('Authorization', access_token)
                    return old_func_call_api(*args, **kwargs)
                else:
                    raise

        self.api_client.call_api = retry_jwt

    def search(self, body, size, collection_name, function_name: Optional[str] = None, **kwargs):  # noqa: E501
        """Find top X similar documents in the dataset according to the selected search option.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        :param async_req bool
        :param SearchFunctionNameBody body: (required)
        :param int size: (required)
        :param str collection_name: (required)
        :param str function_name:
        :return: SearchFunctionNameBody
                 If the method is called asynchronously,
                 returns the request thread.
        """
        if function_name is None:
            return super().search(body, size, collection_name)
        else:
            return super().search(body, size, collection_name, function_name=function_name)
